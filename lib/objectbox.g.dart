// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'models/chat_model.dart';
import 'models/friend_model.dart';
import 'models/images.dart';
import 'models/messages.dart';
import 'models/profile_model.dart';
import 'models/user_model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 6714089126297128343),
      name: 'Chat',
      lastPropertyId: const IdUid(3, 5045056517262744980),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 360290954668447531),
            name: 'id',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 3421935401248745147),
            name: 'friendsId',
            type: 11,
            flags: 520,
            indexId: const IdUid(1, 156106009981655963),
            relationTarget: 'Friends'),
        ModelProperty(
            id: const IdUid(3, 5045056517262744980),
            name: 'dateCreated',
            type: 10,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(1, 8251691790805673972),
            name: 'messages',
            targetId: const IdUid(3, 2253509713044817841))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 5751743259074997123),
      name: 'Friends',
      lastPropertyId: const IdUid(5, 7350730964031820703),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 429208442247355916),
            name: 'id',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 1347445695355161326),
            name: 'profile2Id',
            type: 11,
            flags: 520,
            indexId: const IdUid(2, 3835717775038074624),
            relationTarget: 'Profile'),
        ModelProperty(
            id: const IdUid(3, 1214117766279467779),
            name: 'accepted',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8705510239384658003),
            name: 'dateAdded',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 7350730964031820703),
            name: 'profile1Id',
            type: 11,
            flags: 520,
            indexId: const IdUid(3, 3946412709594771342),
            relationTarget: 'Profile')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(3, 2253509713044817841),
      name: 'Message',
      lastPropertyId: const IdUid(4, 8062422024160714380),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 844980088346202103),
            name: 'id',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 7995401647993439757),
            name: 'content',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 698582122897799029),
            name: 'datePosted',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8062422024160714380),
            name: 'sender',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(4, 7332190955515328081),
      name: 'Profile',
      lastPropertyId: const IdUid(5, 7444239027507149595),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7573817153003269179),
            name: 'id',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 5273641687600313329),
            name: 'userId',
            type: 11,
            flags: 520,
            indexId: const IdUid(4, 4857610066674421387),
            relationTarget: 'User'),
        ModelProperty(
            id: const IdUid(3, 6929107495784978973),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 7980452014426625437),
            name: 'dateOfBirth',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 7444239027507149595),
            name: 'bio',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(2, 8866988630169782075),
            name: 'images',
            targetId: const IdUid(5, 5261969142082156847))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(5, 5261969142082156847),
      name: 'ProfileImages',
      lastPropertyId: const IdUid(3, 8076147544019440437),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5443382446585934419),
            name: 'id',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 2065621413627115192),
            name: 'image',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 8076147544019440437),
            name: 'isDefault',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(6, 220465078078885656),
      name: 'User',
      lastPropertyId: const IdUid(2, 4030579164794779196),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8802236087504554460),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4030579164794779196),
            name: 'spotifyId',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(6, 220465078078885656),
      lastIndexId: const IdUid(4, 4857610066674421387),
      lastRelationId: const IdUid(2, 8866988630169782075),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    Chat: EntityDefinition<Chat>(
        model: _entities[0],
        toOneRelations: (Chat object) => [object.friends],
        toManyRelations: (Chat object) =>
            {RelInfo<Chat>.toMany(1, object.id): object.messages},
        getId: (Chat object) => object.id,
        setId: (Chat object, int id) {
          object.id = id;
        },
        objectToFB: (Chat object, fb.Builder fbb) {
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.friends.targetId);
          fbb.addInt64(2, object.dateCreated.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Chat(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              dateCreated: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0)));
          object.friends.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          object.friends.attach(store);
          InternalToManyAccess.setRelInfo(object.messages, store,
              RelInfo<Chat>.toMany(1, object.id), store.box<Chat>());
          return object;
        }),
    Friends: EntityDefinition<Friends>(
        model: _entities[1],
        toOneRelations: (Friends object) => [object.profile2, object.profile1],
        toManyRelations: (Friends object) => {},
        getId: (Friends object) => object.id,
        setId: (Friends object, int id) {
          object.id = id;
        },
        objectToFB: (Friends object, fb.Builder fbb) {
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.profile2.targetId);
          fbb.addBool(2, object.accepted);
          fbb.addInt64(3, object.dateAdded.millisecondsSinceEpoch);
          fbb.addInt64(4, object.profile1.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Friends(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              dateAdded: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0)),
              accepted: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 8, false));
          object.profile2.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          object.profile2.attach(store);
          object.profile1.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.profile1.attach(store);
          return object;
        }),
    Message: EntityDefinition<Message>(
        model: _entities[2],
        toOneRelations: (Message object) => [],
        toManyRelations: (Message object) => {},
        getId: (Message object) => object.id,
        setId: (Message object, int id) {
          object.id = id;
        },
        objectToFB: (Message object, fb.Builder fbb) {
          final contentOffset = fbb.writeString(object.content);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, contentOffset);
          fbb.addInt64(2, object.datePosted.millisecondsSinceEpoch);
          fbb.addInt64(3, object.sender);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Message(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              content: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              datePosted: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0)),
              sender:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0));

          return object;
        }),
    Profile: EntityDefinition<Profile>(
        model: _entities[3],
        toOneRelations: (Profile object) => [object.user],
        toManyRelations: (Profile object) =>
            {RelInfo<Profile>.toMany(2, object.id): object.images},
        getId: (Profile object) => object.id,
        setId: (Profile object, int id) {
          object.id = id;
        },
        objectToFB: (Profile object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final bioOffset = fbb.writeString(object.bio);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.user.targetId);
          fbb.addOffset(2, nameOffset);
          fbb.addInt64(3, object.dateOfBirth.millisecondsSinceEpoch);
          fbb.addOffset(4, bioOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Profile(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              dateOfBirth: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0)),
              bio: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''));
          object.user.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          object.user.attach(store);
          InternalToManyAccess.setRelInfo(object.images, store,
              RelInfo<Profile>.toMany(2, object.id), store.box<Profile>());
          return object;
        }),
    ProfileImages: EntityDefinition<ProfileImages>(
        model: _entities[4],
        toOneRelations: (ProfileImages object) => [],
        toManyRelations: (ProfileImages object) => {},
        getId: (ProfileImages object) => object.id,
        setId: (ProfileImages object, int id) {
          object.id = id;
        },
        objectToFB: (ProfileImages object, fb.Builder fbb) {
          final imageOffset = fbb.writeString(object.image);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, imageOffset);
          fbb.addBool(2, object.isDefault);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ProfileImages(
              image: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              isDefault: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 8, false));

          return object;
        }),
    User: EntityDefinition<User>(
        model: _entities[5],
        toOneRelations: (User object) => [],
        toManyRelations: (User object) => {},
        getId: (User object) => object.id,
        setId: (User object, int id) {
          object.id = id;
        },
        objectToFB: (User object, fb.Builder fbb) {
          final spotifyIdOffset = fbb.writeString(object.spotifyId);
          fbb.startTable(3);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(1, spotifyIdOffset);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = User(
              spotifyId: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''))
            ..id =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [Chat] entity fields to define ObjectBox queries.
class Chat_ {
  /// see [Chat.id]
  static final id = QueryIntegerProperty<Chat>(_entities[0].properties[0]);

  /// see [Chat.friends]
  static final friends =
      QueryRelationToOne<Chat, Friends>(_entities[0].properties[1]);

  /// see [Chat.dateCreated]
  static final dateCreated =
      QueryIntegerProperty<Chat>(_entities[0].properties[2]);

  /// see [Chat.messages]
  static final messages =
      QueryRelationToMany<Chat, Message>(_entities[0].relations[0]);
}

/// [Friends] entity fields to define ObjectBox queries.
class Friends_ {
  /// see [Friends.id]
  static final id = QueryIntegerProperty<Friends>(_entities[1].properties[0]);

  /// see [Friends.profile2]
  static final profile2 =
      QueryRelationToOne<Friends, Profile>(_entities[1].properties[1]);

  /// see [Friends.accepted]
  static final accepted =
      QueryBooleanProperty<Friends>(_entities[1].properties[2]);

  /// see [Friends.dateAdded]
  static final dateAdded =
      QueryIntegerProperty<Friends>(_entities[1].properties[3]);

  /// see [Friends.profile1]
  static final profile1 =
      QueryRelationToOne<Friends, Profile>(_entities[1].properties[4]);
}

/// [Message] entity fields to define ObjectBox queries.
class Message_ {
  /// see [Message.id]
  static final id = QueryIntegerProperty<Message>(_entities[2].properties[0]);

  /// see [Message.content]
  static final content =
      QueryStringProperty<Message>(_entities[2].properties[1]);

  /// see [Message.datePosted]
  static final datePosted =
      QueryIntegerProperty<Message>(_entities[2].properties[2]);

  /// see [Message.sender]
  static final sender =
      QueryIntegerProperty<Message>(_entities[2].properties[3]);
}

/// [Profile] entity fields to define ObjectBox queries.
class Profile_ {
  /// see [Profile.id]
  static final id = QueryIntegerProperty<Profile>(_entities[3].properties[0]);

  /// see [Profile.user]
  static final user =
      QueryRelationToOne<Profile, User>(_entities[3].properties[1]);

  /// see [Profile.name]
  static final name = QueryStringProperty<Profile>(_entities[3].properties[2]);

  /// see [Profile.dateOfBirth]
  static final dateOfBirth =
      QueryIntegerProperty<Profile>(_entities[3].properties[3]);

  /// see [Profile.bio]
  static final bio = QueryStringProperty<Profile>(_entities[3].properties[4]);

  /// see [Profile.images]
  static final images =
      QueryRelationToMany<Profile, ProfileImages>(_entities[3].relations[0]);
}

/// [ProfileImages] entity fields to define ObjectBox queries.
class ProfileImages_ {
  /// see [ProfileImages.id]
  static final id =
      QueryIntegerProperty<ProfileImages>(_entities[4].properties[0]);

  /// see [ProfileImages.image]
  static final image =
      QueryStringProperty<ProfileImages>(_entities[4].properties[1]);

  /// see [ProfileImages.isDefault]
  static final isDefault =
      QueryBooleanProperty<ProfileImages>(_entities[4].properties[2]);
}

/// [User] entity fields to define ObjectBox queries.
class User_ {
  /// see [User.id]
  static final id = QueryIntegerProperty<User>(_entities[5].properties[0]);

  /// see [User.spotifyId]
  static final spotifyId =
      QueryStringProperty<User>(_entities[5].properties[1]);
}
